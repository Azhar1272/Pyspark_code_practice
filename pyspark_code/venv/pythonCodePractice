'''
## anagram

def anagram(input):
    sorted_word = ''
    dic = {}
    for word in  input:
        sorted_word = ''.join(sorted(word))
        if sorted_word in dic:
            dic[sorted_word].append(word)
        else:
            dic[sorted_word] = [word] # both are same word needs to pass in list coz it is a list
            #dic.update({sorted_word:[word]}) both are same word needs to pass in list coz it is a list
    
    return dic

input = ["eat", "tea", "dot", "car", "ate", "arc"]
output = anagram(input)

print(output)
'''

'''
def create_dic(keys,values):
    dic = {}
    for i in range(len(keys)):
        dic[keys[i]] = values[i]
    return dic


keys = ["name", "age", "city"]
values = ["Alice", 25, "New York"]

output = create_dic(keys,values)
print(output)



'''''''
def countOfelement(lst):
    distinct_list = set(lst)
    dic = {}
    for x in distinct_list:
        dic.update({x:lst.count(x)})
    return dic



lst = ['a', 'c', 'b', 'b', 'c', 'c', 'd']
output = countOfelement(lst)
print(output)
'''
'''
def countofelement(s):
    lst = []
    lst = s.split(' ')
    distinct_list = set(lst)
    dic = {}
    for x in distinct_list:
        dic.update({x:lst.count(x)})
    return dic

s = "hello world hello"
output = countofelement(s)
print(output)
'''
'''
def output(input):
    count = 1
    out = ''
    for i in range(len(input)-1):
        if input[i] == input[i+1]:
            count += 1
        else:
            out = out + input[i] + str(count) # a1b2c2d4e2
            count  = 1
    out = out + input[i+1]+ str(count)
    return out


input = "abbccddddeeaaf"
output = output(input)
print(output)
'''

# def output(s):
#     out = ''
#     dic = {}
#     len_out = 0
#     for x in s:
#         if x not in out:
#             out = out + x
#         else:
#             if len(out) > len_out:
#                 len_out = len(out)
#                 final_output = out
#             out = x
#     else:
#         if len(out) > len_out:
#                 len_out = len(out)
#                 final_output = out
                
#     return final_output       


# s = "abcefabcdefghkj"
# out = output(s)
# print(out)


def output(fl):
    dic = {}
    cnt = 0
    for lst in fl:
        for item in lst:
            if item in dic.keys():
                #cnt = dic[item] + len(lst)-1
                #dic.update({item:cnt})
                 dic[item] += len(lst)-1 
            else:
                dic.update({item:len(lst)-1})
    return dic

fl = [[1,2,3], [2,3,1,4], [4,3]]
print(output(fl))

def primenumber(lst):
    nonprime = []
    prime = []
    for number in lst:
        print( "outer loop", number)
        mid = int(number/2) + 1
        for i in range(2,mid):
            print( "inner loop", i, number)
            if number % i == 0:
                nonprime.append(number)
                break
        else:
            prime.append(number)
                

    return ('non prime number: ', nonprime, 'prime number: ', prime)


lst = [2,3,4,5,6,7,8,9,10,11]
print(primenumber(lst))


def reverse_string(s):
    lst = s.split(' ')
    out = ''
    for x in lst[::-1]:
        out += x + ' ' 

    return out.strip()

s = "My name is azhar"
# out = "azhar is name My"   
print(reverse_string(s))




import re

def validate_info(data):

    # Check for null or empty fields
    if not data["email"] or not data.get('phone') or not data.get('address'):
        return False, "One or more fields are empty or missing."

    # Validate email format using regex
    email_pattern = r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"
    if not re.match(email_pattern, data['email']):
        return False, "Invalid email format."

    # Validate phone number length (10 digits)
    if not data['phone'].isdigit() or len(data['phone']) != 10:
        return False, "Phone number must be 10 digits."

    # Validate address (basic non-empty string check, can be extended)
    if len(data['address'].strip()) == 0:
        return False, "Invalid address."

    # All validations passed
    return True, "Validation successful."


# Test data
info = {
    "email": "test@example.com",
    "phone": "1234567890",
    "address": "123 Main Street"
}

# Call the function
is_valid, message = validate_info(info)

# Output the result
print("Validation Result:", is_valid)
print("Message:", message)


data = [
    {"sale_id": 1, "product_id": 111, "store_id": 123, "usd_price": 5},   
    {"sale_id": 2, "product_id": 222, "store_id": 124, "usd_price": 15},
    {"sale_id": 3, "product_id": 222, "store_id": 125, "usd_price": 20},
    {"sale_id": 10, "product_id": 111, "store_id": 123, "usd_price": 10},
]

product_id = 0
total_sales = 0
total_price = 0
product_id = set(item["product_id"] for item in data)
result = {}
for id in product_id: # 111
    result[id] = {"total_sales":0, "total_price":0}
    for item in data: # all 4 records
        if item["product_id"]  == id:
            total_sales += 1
            total_price += item["usd_price"]

    result[id] = {"total_sales":total_sales, "total_price":total_price, "avg_sales": total_price/total_sales}

print(result)

